{"version":3,"sources":["components/Navbar.tsx","services/TodoService.tsx","contexts/TodoContext.tsx","components/TodoListItem.tsx","components/TodoList.tsx","components/AddTodo.tsx","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Navbar","className","to","uk-icon","TODO_STORE","get","data","localStorage","getItem","JSON","parse","error","TodoContext","createContext","todos","addTodo","removeTodo","toggle","TodoProvider","props","useState","setTodos","useEffect","length","setItem","stringify","Provider","value","title","todo","id","done","index","indexOf","filter","_","i","children","TodoListItem","useContext","type","checked","onChange","event","onClick","TodoList","map","schema","yup","shape","required","AddTodo","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","onSubmit","e","target","reset","window","location","href","placeholder","message","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e2d787b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Navbar =() =>{\r\n    return (\r\n        <div className=\"uk-container\">\r\n            <nav className=\"uk-navbar\">\r\n                <div className=\"uk-navbar-left\">\r\n                    <Link to=\"/\" className=\"uk-navbar-item uk-logo\">My Todos</Link>\r\n                </div>\r\n\r\n                <div className=\"uk-navbar-right\">\r\n                    <ul className=\"uk-navbar-nav\">\r\n                        <li>\r\n                            <Link to=\"/create\">\r\n                            <span uk-icon=\"icon: plus; ratio:1.2\"></span>\r\n                            </Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import { Todo } from \"../Models/Todo\";\r\n\r\nconst TODO_STORE = 'todos';\r\n\r\nexport const get = () => {\r\n    const data = localStorage.getItem(TODO_STORE) || '';\r\n\r\n    try {\r\n        const result = JSON.parse(data) as Todo[];\r\n        return result;\r\n    } catch (error) {\r\n        return [];\r\n    }\r\n}\r\n\r\nexport const save = (data : Todo[]) => {\r\n    if(data?.length >= 1){\r\n        localStorage.setItem(TODO_STORE, JSON.stringify(data));\r\n    }\r\n}","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { createContext } from \"react\";\r\nimport { Todo } from \"../Models/Todo\";\r\nimport { get, save } from \"../services/TodoService\";\r\nimport { TodoContextType } from \"./TodoContextType\";\r\n\r\nexport const TodoContext = createContext<TodoContextType>({\r\n    todos: [],\r\n    addTodo: () => {},\r\n    removeTodo: () => {},\r\n    toggle: () => {}\r\n    });\r\n\r\nconst TodoProvider = (props : any) => {\r\n\r\n    const  [todos, setTodos] = useState<Todo[]>(get);\r\n\r\n    // useEffect tem a função de monitorar o estado de um objeto\r\n    // e fazer alguma ação sempre que o objeto monitorado sofrer alteração \r\n    useEffect(() => {\r\n        save(todos);\r\n    }, [todos]);\r\n\r\n\r\n    const  addTodo =(title: string) => {\r\n        const todo: Todo = { id: todos.length + 1, title: title, done: false}\r\n        setTodos([...todos, todo])\r\n    }\r\n\r\n    const  removeTodo =(todo: Todo) => {\r\n        const index = todos.indexOf(todo);\r\n        setTodos(todos.filter((_, i) => i !== index));\r\n    }\r\n\r\n    const  toggle =(todo: Todo) => {\r\n        const index = todos.indexOf(todo);\r\n        todos[index].done = !todo.done;\r\n        setTodos([...todos]);\r\n    }\r\n\r\n\r\n    return (\r\n        <TodoContext.Provider value={{todos, addTodo, removeTodo, toggle}}>\r\n            {props.children}\r\n        </TodoContext.Provider>\r\n    );\r\n};\r\n\r\nexport default TodoProvider;","import { useContext } from \"react\";\r\nimport {TodoContext} from \"../contexts/TodoContext\";\r\nimport { TodoContextType } from \"../contexts/TodoContextType\";\r\nimport { Todo } from \"../Models/Todo\";\r\n\r\ninterface TodoListItemProps {\r\n    todo: Todo\r\n}\r\n\r\nconst TodoListItem = (props : TodoListItemProps) =>{\r\n\r\n    const {removeTodo, toggle} = useContext<TodoContextType>(TodoContext);\r\n\r\n    const handleChange = (event : any) => {\r\n        toggle(props.todo);\r\n    }\r\n\r\n    const onRemove = (todo: Todo) => {\r\n        removeTodo(todo);\r\n    }\r\n\r\n    return (\r\n    <tr className=\"uk-animation-slide-botton-medium\">\r\n        <td className=\"uk-width-auto\">\r\n            <label>\r\n                <input className=\"uk-checkbox\" type=\"checkbox\" checked={props.todo.done} onChange={handleChange}></input>\r\n            </label>\r\n        </td>\r\n\r\n        <td className=\"uk-width-expand\">\r\n            {props.todo.title}\r\n        </td>\r\n\r\n        <td className=\"uk-width-auto\">\r\n            <button className=\"uk-icon-button uk-button-danger\" uk-icon=\"trash\"  onClick={() => onRemove(props.todo)}></button>\r\n        </td>\r\n    </tr>\r\n    )\r\n}\r\n\r\nexport default TodoListItem;","import React from \"react\";\r\nimport { useContext } from \"react\";\r\nimport { TodoContext } from \"../contexts/TodoContext\";\r\nimport { TodoContextType } from \"../contexts/TodoContextType\";\r\nimport TodoListItem from \"./TodoListItem\";\r\n\r\nconst TodoList = () => {\r\n\r\n    const {todos} = useContext<TodoContextType>(TodoContext);\r\n\r\n    return (\r\n        <table className=\"uk-table\">\r\n            <caption>Lista de tarefas</caption>\r\n            <thead>\r\n                <tr>\r\n                    <th>#</th>\r\n                    <th>Tarefa</th>\r\n                    <th>Feito</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {\r\n                todos?.map(\r\n                    todo => (\r\n                        <TodoListItem key={todo.id} todo={todo}></TodoListItem>\r\n                    )\r\n                )\r\n            }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default TodoList;","import React, {useContext} from \"react\";\r\nimport { TodoContext } from \"../contexts/TodoContext\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from 'yup';\r\nimport { TodoContextType } from \"../contexts/TodoContextType\";\r\n\r\nconst schema = yup.object().shape({\r\n    title: yup.string().required('Tarefa inválida')\r\n});\r\n\r\ninterface AddTodoForm{\r\n    title: string\r\n}\r\n\r\nconst AddTodo = () =>  {\r\n    const { addTodo } = useContext<TodoContextType>(TodoContext);\r\n\r\n    const { register, handleSubmit,  formState: { errors } } = useForm({\r\n        resolver: yupResolver(schema),\r\n      });\r\n\r\n    const onSubmit = (data: AddTodoForm, e: any) => {\r\n        addTodo(data.title);\r\n        e.target.reset();\r\n        window.location.href = '/';\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit<AddTodoForm>(onSubmit)}>\r\n            <h4>Nova Tarefa</h4>\r\n            <div className=\"uk-margin uk-width-1-1\">\r\n                <input type=\"text\" id=\"title\" placeholder=\"informe o titulo da tarefa\"className=\"uk-input\" {...register('title')}></input>\r\n                <span><small><strong className=\"uk-text-danger\">{errors.title?.message}</strong></small></span>\r\n            </div>\r\n\r\n            <div className=\"uk-width-1-1\">\r\n                <button type=\"submit\" className=\"uk-button uk-button-primary\">Salvar</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddTodo;","import React from \"react\";\r\nimport Navbar from \"./Navbar\";\r\nimport TodoList from \"./TodoList\";\r\nimport TodoContext from \"../contexts/TodoContext\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport AddTodo from \"./AddTodo\";\r\n\r\nconst  App = () =>{\r\n    return (\r\n        <TodoContext>\r\n            <Router>\r\n                <Navbar/>\r\n                <br></br>\r\n                <div className=\"uk-container\">\r\n                    <Switch>\r\n                        <Route path=\"/create\">\r\n                            <AddTodo/>\r\n                        </Route>\r\n\r\n                        <Route path=\"/\">\r\n                            <h4>Minha Lista de Tarefas</h4>\r\n                            <TodoList/>\r\n                        </Route>\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        </TodoContext>\r\n    );\r\n}\r\n\r\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}